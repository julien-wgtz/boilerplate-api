// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String?
  password  String
  accounts  UserAccount[]
  verified  Boolean   @default(false)
  tokens    Token[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Account {
  id         Int           @id @default(autoincrement())
  name       String
  status     AccountStatus // Enum définissant le statut du compte
  users      UserAccount[] // Relation Many-to-Many entre User et Account
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

model UserAccount {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  account   Account  @relation(fields: [accountId], references: [id])
  accountId Int
  role      UserRole // Enum définissant le rôle de l'utilisateur pour ce compte
  createdAt DateTime @default(now())
}

model Session {
  id        Int   @id @default(autoincrement())
  sid       String   @unique
  expire   DateTime
  sess   Json
  @@map("Sessions")
}

model Token {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  token     String
  createdAt DateTime @default(now())
  expiresAt DateTime
    @@map("Tokens")
}

//
//  Enumérations
//

enum AccountStatus {
  FREE
  PRO
  SUSPENDED
}

enum UserRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}